#!/bin/bash

set -e
shopt -s extglob

modes="debug|release"
scheds="ser|pthread|omp|tbb|cobra"
comms="off|mpi"
asyncs="off|mpi3"

function usage {
	echo "Usage: $0 [--with-cc=<cmd>] [--with-cxx=<cmd>] [--mode=$modes] [--sched=$scheds] [--comm=$comms] [--async=$asyncs] [--mpi=<pkg>] [--pkg-dir=<dir>] [--no-inst]" 2>&1
}

function use_err {
	echo $1 1>&2
	usage
	exit 1
}

# Early check

BASE="$(dirname "$0")"
pkgcfg="$(which pkg-config)" || true

if ! [ -x "$pkgcfg" ]; then
	echo "Could not find pkg-config" 1>&2
	exit 1
fi

# Default options

cc=gcc
cxx=g++
mode=debug
sched=ser
comm=mpi
mpi=ompi-c
async=off
inst=1

# Parse arguments

CONFIG="$0 $@"
while [ $# != 0 ]; do
	case $1 in
		--with-cc=*)
			cc="${1#*=}"
		;;
		--with-cxx=*)
			cxx="${1#*=}"
		;;
		--mode=*)
			mode=${1#*=}
			[[ $mode == @($modes) ]] || use_err "Invalid mode: $mode"
		;;
		--sched=*)
			sched=${1#*=}
			[[ $sched == @($scheds) ]] || use_err "Invalid scheduler: $sched"
		;;
		--comm=*)
			comm=${1#*=}
			[[ $comm == @($comms) ]] || use_err "Invalid scheduler: $sched"
		;;
		--mpi=*)
			mpi=${1#*=}
		;;
		--async=*)
			async=${1#*=}
			[[ $async == @($asyncs) ]] || use_err "Invalid async: $async"
		;;
		--pkg-dir=*)
			dir=${1#*=}
			cp $dir/*.pc .
		;;
		--no-inst)
			inst=
		;;
		-h|--help)
			usage
			exit 0
		;;
		-*)
			use_err "Unrecognized option: $1"
		;;
		*)
			use_err "This command takes no open arguments"
		;;
	esac
	shift
done

# Interpret options

pub_pkgs=""
pri_pkgs=""
pub_cflags=""
pub_libs=""
pri_ldflags="-O2 -fstrict-aliasing"
pri_cflags="-O2 -fstrict-aliasing -Wall -Wextra -Wfatal-errors -Winline -I. -I$BASE/include"

case $mode in
	release)
		pri_cflags="$pri_cflags -DNDEBUG"
	;;
	debug)
		pri_cflags="$pri_cflags -g"
	;;
esac

case $comm in
	mpi)
		pri_cflags="$pri_cflags -DSHARK_MPI_COMM"
		pri_pkgs="$pri_pkgs $mpi"
	;;
	off)
		pri_cflags="$pri_cflags -DSHARK_NO_COMM"
	;;
esac

case $sched in
	ser)
		pub_cflags="$pub_cflags -DSHARK_SER_SCHED"
	;;
	pthread)
		pub_cflags="$pub_cflags -pthread -DSHARK_PTHREAD_SCHED"
		pub_libs="$pub_libs -lpthread"
	;;
	omp)
		pub_cflags="$pub_cflags -fopenmp -DSHARK_OMP_SCHED"
		pub_libs="$pub_libs -fopenmp"
	;;
	tbb)
		pub_cflags="$pub_cflags -DSHARK_TBB_SCHED"
		pub_pkgs="$pub_pkgs tbb"
	;;
	cobra)
		pub_cflags="$pub_cflags -DSHARK_COBRA_SCHED"
		pub_pkgs="$pub_pkgs cobra"
	;;
esac

case $async in
	mpi3)
		if [ $comm != mpi ]; then
			echo "async=mpi3 requires comm=mpi" 1>&2
			exit 1
		fi
		pub_cflags="$pub_cflags -DSHARK_MPI_ASYNC"
	;;
esac

# Determine version

VER=$(awk '$1 == "#define" && $2 == "SHARK_VERSION" { print $3 }' "$BASE/include/shark/version.hpp")
echo "Configuring Shark version $VER..."

# Verify options

echo -n "Checking CC... "
if v=$($cc --version 2>/dev/null); then
	echo "${v%%$'\n'*}"
else
	echo "failed"
	exit 1
fi
echo -n "Checking CXX... "
if v=$($cxx --version 2>/dev/null); then
	echo "${v%%$'\n'*}"
else
	echo "failed"
	exit 1
fi
echo -n "Checking basic C++0x support... "
if echo 'auto f = [](){};' | $cxx -c -std=c++0x -o cpp0x.o -x c++ - && rm cpp0x.o; then
	echo "ok"
else
	echo "failed"
	exit 1
fi
echo -n "Checking standard library... "
if echo '#include <type_traits>' | $cxx -E -std=c++0x -x c++ - | grep '^#.*tr1_impl/type_traits' >/dev/null; then
	echo "libstdc++ tr1_impl workaround"
	pub_cflags="$pub_cflags -DSHARK_GLIBCXX_TR1IMPL"
else
	echo "ok"
fi


export PKG_CONFIG_PATH=".:$PKG_CONFIG_PATH"

for pkg in $pri_pkgs $pub_pkgs; do
	echo -n "Checking $pkg... "
	if ! $pkgcfg --modversion $pkg 2>/dev/null; then
		echo failed
		exit 1
	fi
done

echo "Creating subdirs..."
mkdir -p src

echo "Writing Makefile..."
cat > Makefile <<END
CC=$cc
CXX=$cxx
LDFLAGS:=$pri_ldflags
CFLAGS:=$pri_cflags $pub_cflags $($pkgcfg --cflags $pri_pkgs $pub_pkgs)
LDLIBS:=$pri_libs $pub_libs $($pkgcfg --libs --static $pri_pkgs $pub_pkgs)

ROOT=$BASE
include \$(ROOT)/Makefile.common
END

echo "Writing shark.pc..."
cat > shark.pc <<END
includedir=$(cd $BASE && pwd)/include
libdir=$(pwd)

Name: shark
Description: Scalable Hybrid Array Kit
Version: $VER
Requires: $pub_pkgs
Requires.private: $pri_pkgs
Cflags: -I\${includedir} $pub_cflags
Libs: $pub_libs -L\${libdir} -lshark
Libs.private: $pri_libs
END

if [ -n "$inst" ]; then
	for f in types inst_dim inst_dimtype; do
		echo "Creating $f..."
		cp "$BASE/$f.tmpl" "$f"
	done
fi

echo "Writing config.log..."
cat > config.log <<END
$CONFIG
$(date)
END
